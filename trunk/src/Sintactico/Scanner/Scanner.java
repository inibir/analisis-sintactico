package Sintactico.Scanner;
import Sintactico.Exceptions.*;
import java.io.IOException;
/* The following code was generated by JFlex 1.4.3 on 07/04/11 10:03 AM */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 07/04/11 10:03 AM from the specification file
 * <tt>C:/Users/Javier/Documents/Quinto Semestre/Compi/svn/jflex-1.4.3/bin/progra.flex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\42"+
    "\1\45\1\0\1\6\1\0\1\53\1\0\1\54\1\55\1\5\1\46"+
    "\1\57\1\47\1\60\1\4\1\10\11\11\1\0\1\56\1\50\1\44"+
    "\1\51\2\0\22\6\1\31\7\6\1\33\1\63\1\34\1\0\1\6"+
    "\1\0\1\22\1\25\1\20\1\27\1\35\1\37\1\32\1\41\1\12"+
    "\2\6\1\21\1\13\1\30\1\15\1\14\1\6\1\16\1\23\1\17"+
    "\1\24\1\26\1\40\1\36\1\43\1\6\1\61\1\52\1\62\1\0"+
    "\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0"+
    "\14\6\16\0\5\6\11\0\1\6\21\0\130\7\5\0\23\7\12\0"+
    "\1\6\13\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0"+
    "\54\6\1\0\46\6\1\0\5\6\4\0\202\6\1\0\4\7\3\0"+
    "\105\6\1\0\46\6\2\0\2\6\6\0\20\6\41\0\46\6\2\0"+
    "\1\6\7\0\47\6\11\0\21\7\1\0\27\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\1\0\1\7\13\0\33\6\5\0\3\6\15\0"+
    "\4\7\14\0\6\7\13\0\32\6\5\0\13\6\16\7\7\0\12\7"+
    "\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6"+
    "\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7"+
    "\1\6\1\7\36\6\33\7\2\0\3\6\60\0\46\6\13\7\1\6"+
    "\u014f\0\3\7\66\6\2\0\1\7\1\6\20\7\2\0\1\6\4\7"+
    "\3\0\12\6\2\7\2\0\12\7\21\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0"+
    "\1\7\1\6\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0"+
    "\2\6\1\0\3\6\2\7\2\0\12\7\4\6\15\0\3\7\1\0"+
    "\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0"+
    "\3\7\13\0\4\6\1\0\1\6\7\0\14\7\3\6\14\0\3\7"+
    "\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7"+
    "\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0"+
    "\3\7\10\0\2\7\4\0\2\6\1\0\3\6\4\0\12\7\1\0"+
    "\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6"+
    "\3\0\10\6\1\0\3\6\4\0\5\7\3\0\3\7\1\0\4\7"+
    "\11\0\1\7\17\0\11\7\11\0\1\6\7\0\3\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\6\4\0\12\7"+
    "\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\7\0\1\6\1\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6\4\0\6\7"+
    "\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\6\4\0\12\7"+
    "\22\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6"+
    "\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7"+
    "\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7"+
    "\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6"+
    "\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6"+
    "\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0"+
    "\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7"+
    "\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7"+
    "\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\42\6\6\0"+
    "\24\7\1\0\2\7\4\6\4\0\10\7\1\0\44\7\11\0\1\7"+
    "\71\0\42\6\1\0\5\6\1\0\2\6\1\0\7\7\3\0\4\7"+
    "\6\0\12\7\6\0\6\6\4\7\106\0\46\6\12\0\51\6\7\0"+
    "\132\6\5\0\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\47\6\1\0\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\7\6\1\0\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0"+
    "\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6\3\0\3\6\17\0"+
    "\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7"+
    "\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0"+
    "\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7"+
    "\6\0\130\6\10\0\51\6\1\7\126\0\35\6\3\0\14\7\4\0"+
    "\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6"+
    "\4\0\132\6\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6"+
    "\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6"+
    "\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6"+
    "\17\0\4\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\4\7"+
    "\6\0\6\7\1\0\1\6\15\0\1\6\40\0\22\6\36\0\15\7"+
    "\4\0\1\7\3\0\6\7\27\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6"+
    "\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0"+
    "\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\137\6\5\0"+
    "\50\6\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0"+
    "\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0"+
    "\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0"+
    "\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0"+
    "\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0"+
    "\4\7\17\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0"+
    "\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0"+
    "\1\6\1\0\32\6\12\0\132\6\3\0\6\6\2\0\6\6\2\0"+
    "\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\2\6\15\5"+
    "\1\7\1\10\3\5\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\1\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\2\0\1\5\1\32"+
    "\1\33\23\5\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\2\0\1\5\1\46\3\5"+
    "\1\47\11\5\1\50\7\5\1\0\2\5\1\51\3\5"+
    "\1\52\1\53\1\54\4\5\1\55\2\5\1\56\1\57"+
    "\10\5\1\60\6\5\1\61\1\62\1\63\2\5\1\64"+
    "\1\65\1\66\1\67\2\5\1\70\2\5\1\71\1\72"+
    "\1\0\1\73\1\5\1\74\1\5\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\150\0\320\0\150\0\u0104"+
    "\0\150\0\u0138\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270"+
    "\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\150"+
    "\0\150\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\150\0\150"+
    "\0\150\0\u0514\0\u0548\0\u057c\0\u05b0\0\150\0\150\0\150"+
    "\0\150\0\150\0\150\0\150\0\u05e4\0\150\0\u0618\0\u064c"+
    "\0\u0680\0\u06b4\0\u06e8\0\u0104\0\u071c\0\u0750\0\u0784\0\u07b8"+
    "\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958"+
    "\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\150"+
    "\0\150\0\150\0\150\0\150\0\150\0\150\0\150\0\150"+
    "\0\150\0\u0af8\0\u0b2c\0\u0b60\0\u0104\0\u0b94\0\u0bc8\0\u0bfc"+
    "\0\u0104\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68"+
    "\0\u0d9c\0\u0dd0\0\u0104\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4"+
    "\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u0104\0\u100c\0\u1040"+
    "\0\u1074\0\u0104\0\u0104\0\u0104\0\u10a8\0\u10dc\0\u1110\0\u1144"+
    "\0\u0104\0\u1178\0\u11ac\0\u0104\0\u0104\0\u11e0\0\u1214\0\u1248"+
    "\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u0104\0\u1380\0\u13b4"+
    "\0\u13e8\0\u141c\0\u1450\0\u1484\0\u0104\0\u0104\0\u0104\0\u14b8"+
    "\0\u14ec\0\u0104\0\u0104\0\u0104\0\u0104\0\u1520\0\u1554\0\u0104"+
    "\0\u1588\0\u15bc\0\u0104\0\u0104\0\u15f0\0\u0104\0\u1624\0\150"+
    "\0\u1658\0\u0104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\10\1\23\1\10\1\24\1\25\1\10\1\26"+
    "\1\27\1\10\1\30\1\31\1\32\1\10\1\33\1\34"+
    "\1\10\1\35\1\10\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\3\1\55\2\3\42\55\1\56\15\55"+
    "\1\57\66\0\1\5\65\0\1\60\1\61\64\0\25\10"+
    "\2\0\5\10\1\0\1\10\30\0\2\12\60\0\5\10"+
    "\1\62\14\10\1\63\2\10\2\0\2\10\1\64\2\10"+
    "\1\0\1\10\26\0\14\10\1\65\10\10\2\0\5\10"+
    "\1\0\1\10\26\0\10\10\1\66\5\10\1\67\6\10"+
    "\2\0\5\10\1\0\1\10\26\0\16\10\1\70\6\10"+
    "\2\0\5\10\1\0\1\10\26\0\25\10\2\0\1\71"+
    "\4\10\1\0\1\10\26\0\10\10\1\72\14\10\2\0"+
    "\4\10\1\73\1\0\1\10\26\0\13\10\1\74\11\10"+
    "\2\0\5\10\1\0\1\10\26\0\25\10\2\0\1\75"+
    "\4\10\1\0\1\10\26\0\11\10\1\76\13\10\2\0"+
    "\5\10\1\0\1\10\26\0\7\10\1\77\15\10\2\0"+
    "\5\10\1\0\1\10\26\0\7\10\1\100\15\10\2\0"+
    "\5\10\1\0\1\10\26\0\25\10\2\0\1\101\4\10"+
    "\1\0\1\10\26\0\11\10\1\102\13\10\2\0\5\10"+
    "\1\0\1\103\26\0\13\10\1\104\11\10\2\0\1\10"+
    "\1\105\3\10\1\0\1\10\26\0\14\10\1\106\10\10"+
    "\2\0\5\10\1\0\1\10\26\0\25\10\2\0\4\10"+
    "\1\107\1\0\1\10\64\0\1\110\63\0\1\111\63\0"+
    "\1\112\63\0\1\113\71\0\1\114\64\0\1\115\10\0"+
    "\1\55\2\0\42\55\1\0\15\55\17\0\1\116\1\117"+
    "\10\0\1\120\14\0\1\121\16\0\1\60\1\4\1\5"+
    "\61\60\5\122\1\123\56\122\6\0\6\10\1\124\16\10"+
    "\2\0\5\10\1\0\1\10\26\0\11\10\1\125\13\10"+
    "\2\0\5\10\1\0\1\10\26\0\4\10\1\126\20\10"+
    "\2\0\5\10\1\0\1\10\26\0\4\10\1\127\20\10"+
    "\2\0\5\10\1\0\1\10\26\0\17\10\1\130\5\10"+
    "\2\0\5\10\1\0\1\10\26\0\11\10\1\131\13\10"+
    "\2\0\5\10\1\0\1\10\26\0\11\10\1\132\2\10"+
    "\1\133\10\10\2\0\5\10\1\0\1\10\26\0\16\10"+
    "\1\134\6\10\2\0\5\10\1\0\1\10\26\0\4\10"+
    "\1\135\20\10\2\0\5\10\1\0\1\10\26\0\14\10"+
    "\1\136\10\10\2\0\5\10\1\0\1\10\26\0\22\10"+
    "\1\137\2\10\2\0\5\10\1\0\1\10\26\0\14\10"+
    "\1\140\10\10\2\0\5\10\1\0\1\10\26\0\7\10"+
    "\1\141\15\10\2\0\5\10\1\0\1\10\26\0\4\10"+
    "\1\142\20\10\2\0\5\10\1\0\1\10\26\0\25\10"+
    "\2\0\3\10\1\143\1\10\1\0\1\10\26\0\10\10"+
    "\1\144\14\10\2\0\5\10\1\0\1\10\26\0\15\10"+
    "\1\145\7\10\2\0\5\10\1\0\1\10\26\0\15\10"+
    "\1\146\7\10\2\0\5\10\1\0\1\10\26\0\4\10"+
    "\1\147\4\10\1\150\13\10\2\0\5\10\1\0\1\10"+
    "\26\0\13\10\1\151\11\10\2\0\5\10\1\0\1\10"+
    "\26\0\4\10\1\152\20\10\2\0\5\10\1\0\1\10"+
    "\20\0\5\122\1\153\56\122\4\0\1\5\1\123\64\0"+
    "\7\10\1\154\3\10\1\155\11\10\2\0\5\10\1\0"+
    "\1\10\26\0\22\10\1\156\2\10\2\0\5\10\1\0"+
    "\1\10\26\0\22\10\1\157\2\10\2\0\5\10\1\0"+
    "\1\10\26\0\13\10\1\160\11\10\2\0\5\10\1\0"+
    "\1\10\26\0\16\10\1\161\6\10\2\0\5\10\1\0"+
    "\1\10\26\0\21\10\1\162\3\10\2\0\5\10\1\0"+
    "\1\10\26\0\25\10\2\0\1\163\4\10\1\0\1\10"+
    "\26\0\15\10\1\164\7\10\2\0\5\10\1\0\1\10"+
    "\26\0\15\10\1\165\7\10\2\0\5\10\1\0\1\10"+
    "\26\0\24\10\1\166\2\0\5\10\1\0\1\10\26\0"+
    "\11\10\1\167\13\10\2\0\5\10\1\0\1\10\26\0"+
    "\13\10\1\170\11\10\2\0\5\10\1\0\1\10\26\0"+
    "\21\10\1\171\3\10\2\0\5\10\1\0\1\10\26\0"+
    "\4\10\1\172\20\10\2\0\5\10\1\0\1\10\26\0"+
    "\11\10\1\173\13\10\2\0\5\10\1\0\1\10\26\0"+
    "\25\10\2\0\1\174\4\10\1\0\1\10\26\0\11\10"+
    "\1\175\13\10\2\0\5\10\1\0\1\10\26\0\25\10"+
    "\2\0\1\176\4\10\1\0\1\10\26\0\15\10\1\177"+
    "\7\10\2\0\5\10\1\0\1\10\26\0\13\10\1\200"+
    "\11\10\2\0\5\10\1\0\1\10\20\0\4\122\1\5"+
    "\1\153\56\122\6\0\10\10\1\201\14\10\2\0\5\10"+
    "\1\0\1\10\26\0\25\10\2\0\1\202\4\10\1\0"+
    "\1\10\26\0\11\10\1\203\13\10\2\0\5\10\1\0"+
    "\1\10\26\0\4\10\1\204\20\10\2\0\5\10\1\0"+
    "\1\10\26\0\10\10\1\205\14\10\2\0\5\10\1\0"+
    "\1\10\26\0\15\10\1\206\7\10\2\0\5\10\1\0"+
    "\1\10\26\0\11\10\1\207\13\10\2\0\5\10\1\0"+
    "\1\10\26\0\4\10\1\210\20\10\2\0\5\10\1\0"+
    "\1\10\26\0\25\10\2\0\1\211\4\10\1\0\1\10"+
    "\26\0\22\10\1\212\2\10\2\0\5\10\1\0\1\10"+
    "\26\0\25\10\2\0\1\213\4\10\1\0\1\10\26\0"+
    "\22\10\1\214\2\10\2\0\5\10\1\0\1\10\26\0"+
    "\25\10\2\0\1\215\4\10\1\0\1\10\26\0\25\10"+
    "\2\0\1\216\4\10\1\0\1\10\26\0\11\10\1\217"+
    "\13\10\2\0\5\10\1\0\1\10\26\0\5\10\1\220"+
    "\17\10\2\0\5\10\1\0\1\10\26\0\13\10\1\221"+
    "\11\10\2\0\5\10\1\0\1\10\26\0\12\10\1\222"+
    "\12\10\2\0\5\10\1\0\1\10\26\0\22\10\1\223"+
    "\2\10\2\0\5\10\1\0\1\10\26\0\25\10\2\0"+
    "\4\10\1\224\1\0\1\10\26\0\12\10\1\225\12\10"+
    "\2\0\5\10\1\0\1\10\26\0\14\10\1\226\10\10"+
    "\2\0\5\10\1\0\1\10\26\0\24\10\1\227\2\0"+
    "\5\10\1\0\1\10\26\0\5\10\1\230\17\10\2\0"+
    "\5\10\1\0\1\10\26\0\21\10\1\231\3\10\2\0"+
    "\5\10\1\0\1\10\26\0\25\10\2\0\1\232\4\10"+
    "\1\0\1\10\26\0\22\10\1\233\2\10\2\0\5\10"+
    "\1\0\1\10\26\0\22\10\1\234\2\10\2\0\5\10"+
    "\1\0\1\10\26\0\25\10\1\235\1\0\5\10\1\0"+
    "\1\10\26\0\15\10\1\236\7\10\2\0\5\10\1\0"+
    "\1\10\26\0\22\10\1\237\2\10\2\0\5\10\1\0"+
    "\1\10\54\0\1\240\35\0\11\10\1\241\13\10\2\0"+
    "\5\10\1\0\1\10\26\0\15\10\1\242\7\10\2\0"+
    "\5\10\1\0\1\10\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5772];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\16\1\2\11\5\1\3\11\4\1\7\11\1\1\1\11"+
    "\1\1\2\0\26\1\12\11\2\0\27\1\1\0\61\1"+
    "\1\0\2\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Sintactico.Token symbol(int type) {
    return new Sintactico.Token(type, yyline, yycolumn);
  }
  private Sintactico.Token symbol(int type, Object value) {
    return new Sintactico.Token(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1760) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Sintactico.Token nextToken() throws ScannerException, IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 56: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [67] { return symbol(Sintactico.Sym.Tsystem); }");
          { return symbol(Sintactico.Sym.Tsystem);
          }
        case 62: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [119] { /* ignore */ }");
          { /* ignore */
          }
        case 63: break;
        case 44: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [63] { return symbol(Sintactico.Sym.Tthis); }");
          { return symbol(Sintactico.Sym.Tthis);
          }
        case 64: break;
        case 19: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [104] { return symbol(Sintactico.Sym.Tcoma); }");
          { return symbol(Sintactico.Sym.Tcoma);
          }
        case 65: break;
        case 54: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [60] { return symbol(Sintactico.Sym.Tlength); }");
          { return symbol(Sintactico.Sym.Tlength);
          }
        case 66: break;
        case 8: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [106] { return symbol(Sintactico.Sym.TcorcheteFinal); }");
          { return symbol(Sintactico.Sym.TcorcheteFinal);
          }
        case 67: break;
        case 28: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [90] { return symbol(Sintactico.Sym.Tdiferente); }");
          { return symbol(Sintactico.Sym.Tdiferente);
          }
        case 68: break;
        case 35: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [126] { string.append(\'\\t\'); }");
          { string.append('\t');
          }
        case 69: break;
        case 40: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [64] { return symbol(Sintactico.Sym.Tnew); }");
          { return symbol(Sintactico.Sym.Tnew);
          }
        case 70: break;
        case 22: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [109] { return symbol(Sintactico.Sym.TllaveFinal); }");
          { return symbol(Sintactico.Sym.TllaveFinal);
          }
        case 71: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [83] { string.setLength(0); yybegin(STRING); }");
          { string.setLength(0); yybegin(STRING);
          }
        case 72: break;
        case 15: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [93] { return symbol(Sintactico.Sym.Tmayor); }");
          { return symbol(Sintactico.Sym.Tmayor);
          }
        case 73: break;
        case 16: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [101] { return symbol(Sintactico.Sym.TparentesisInicio); }");
          { return symbol(Sintactico.Sym.TparentesisInicio);
          }
        case 74: break;
        case 42: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [71] { return symbol(Sintactico.Sym.Tread); }");
          { return symbol(Sintactico.Sym.Tread);
          }
        case 75: break;
        case 29: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [91] { return symbol(Sintactico.Sym.Tigualigual); }");
          { return symbol(Sintactico.Sym.Tigualigual);
          }
        case 76: break;
        case 59: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [50] { return symbol(Sintactico.Sym.Textends); }");
          { return symbol(Sintactico.Sym.Textends);
          }
        case 77: break;
        case 25: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [131] { string.append(\'\\\\\'); }");
          { string.append('\\');
          }
        case 78: break;
        case 57: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [69] { return symbol(Sintactico.Sym.Tprintln); }");
          { return symbol(Sintactico.Sym.Tprintln);
          }
        case 79: break;
        case 14: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [92] { return symbol(Sintactico.Sym.Tmenor); }");
          { return symbol(Sintactico.Sym.Tmenor);
          }
        case 80: break;
        case 34: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [129] { string.append(\'\\r\'); }");
          { string.append('\r');
          }
        case 81: break;
        case 53: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [52] { return symbol(Sintactico.Sym.Treturn); }");
          { return symbol(Sintactico.Sym.Treturn);
          }
        case 82: break;
        case 10: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [73] { return symbol(Sintactico.Sym.Tigual); }");
          { return symbol(Sintactico.Sym.Tigual);
          }
        case 83: break;
        case 24: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [123] { yybegin(YYINITIAL); "+ZZ_NL+"                                   return symbol(Sintactico.Sym.TstringConstant, string.toString()); }");
          { yybegin(YYINITIAL); 
                                   return symbol(Sintactico.Sym.TstringConstant, string.toString());
          }
        case 84: break;
        case 9: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [65] { return symbol(Sintactico.Sym.Tnegacion); }");
          { return symbol(Sintactico.Sym.Tnegacion);
          }
        case 85: break;
        case 30: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [94] { return symbol(Sintactico.Sym.TmenorIgual); }");
          { return symbol(Sintactico.Sym.TmenorIgual);
          }
        case 86: break;
        case 27: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [56] { return symbol(Sintactico.Sym.Tif); }");
          { return symbol(Sintactico.Sym.Tif);
          }
        case 87: break;
        case 55: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [45] { return symbol(Sintactico.Sym.Tstatic); }");
          { return symbol(Sintactico.Sym.Tstatic);
          }
        case 88: break;
        case 37: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [130] { string.append(\'\\\"\'); }");
          { string.append('\"');
          }
        case 89: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [88] { return symbol(Sintactico.Sym.Tdivision); }");
          { return symbol(Sintactico.Sym.Tdivision);
          }
        case 90: break;
        case 26: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [70] { return symbol(Sintactico.Sym.Tin); }");
          { return symbol(Sintactico.Sym.Tin);
          }
        case 91: break;
        case 32: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [96] { return symbol(Sintactico.Sym.Tor); }");
          { return symbol(Sintactico.Sym.Tor);
          }
        case 92: break;
        case 50: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [58] { return symbol(Sintactico.Sym.Twhile); }");
          { return symbol(Sintactico.Sym.Twhile);
          }
        case 93: break;
        case 51: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [42] { return symbol(Sintactico.Sym.Timport); }");
          { return symbol(Sintactico.Sym.Timport);
          }
        case 94: break;
        case 38: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [53] { return symbol(Sintactico.Sym.Tint); }");
          { return symbol(Sintactico.Sym.Tint);
          }
        case 95: break;
        case 33: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [97] { return symbol(Sintactico.Sym.Tand); }");
          { return symbol(Sintactico.Sym.Tand);
          }
        case 96: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [86] { return symbol(Sintactico.Sym.Tsuma); }");
          { return symbol(Sintactico.Sym.Tsuma);
          }
        case 97: break;
        case 36: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [127] { string.append(\'\\n\'); }");
          { string.append('\n');
          }
        case 98: break;
        case 58: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [55] { return symbol(Sintactico.Sym.Tboolean); }");
          { return symbol(Sintactico.Sym.Tboolean);
          }
        case 99: break;
        case 6: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [82] { return symbol(Sintactico.Sym.TintLiteral); }");
          { return symbol(Sintactico.Sym.TintLiteral,yytext());
          }
        case 100: break;
        case 47: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [72] { return symbol(Sintactico.Sym.Texit); }");
          { return symbol(Sintactico.Sym.Texit);
          }
        case 101: break;
        case 18: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [103] { return symbol(Sintactico.Sym.TpuntoYcoma); }");
          { return symbol(Sintactico.Sym.TpuntoYcoma);
          }
        case 102: break;
        case 39: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [68] { return symbol(Sintactico.Sym.Tout); }");
          { return symbol(Sintactico.Sym.Tout);
          }
        case 103: break;
        case 43: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [61] { return symbol(Sintactico.Sym.Ttrue); }");
          { return symbol(Sintactico.Sym.Ttrue);
          }
        case 104: break;
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [105] { return symbol(Sintactico.Sym.TcorcheteInicio); }");
          { return symbol(Sintactico.Sym.TcorcheteInicio);
          }
        case 105: break;
        case 61: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [51] { return symbol(Sintactico.Sym.Timplements); }");
          { return symbol(Sintactico.Sym.Timplements);
          }
        case 106: break;
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [79] { return symbol(Sintactico.Sym.Tidentifier,yytext()); }");
          { return symbol(Sintactico.Sym.Tidentifier,yytext());
          }
        case 107: break;
        case 4: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [89] { return symbol(Sintactico.Sym.Tmultiplicacion); }");
          { return symbol(Sintactico.Sym.Tmultiplicacion);
          }
        case 108: break;
        case 60: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [48] { return symbol(Sintactico.Sym.Tstring); }");
          { return symbol(Sintactico.Sym.Tstring);
          }
        case 109: break;
        case 45: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [46] { return symbol(Sintactico.Sym.Tvoid); }");
          { return symbol(Sintactico.Sym.Tvoid);
          }
        case 110: break;
        case 46: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [57] { return symbol(Sintactico.Sym.Telse); }");
          { return symbol(Sintactico.Sym.Telse);
          }
        case 111: break;
        case 1: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [135] { throw new Error(\"Caracter no permitido <\"+"+ZZ_NL+"                                                    yytext()+\">\"); }");
          { throw new ScannerException("Caracter no permitido <"+yytext()+">");
          }
        case 112: break;
        case 17: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [102] { return symbol(Sintactico.Sym.TparentesisFinal); }");
          { return symbol(Sintactico.Sym.TparentesisFinal);
          }
        case 113: break;
        case 41: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [47] { return symbol(Sintactico.Sym.Tmain); }");
          { return symbol(Sintactico.Sym.Tmain);
          }
        case 114: break;
        case 49: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [62] { return symbol(Sintactico.Sym.Tfalse); }");
          { return symbol(Sintactico.Sym.Tfalse);
          }
        case 115: break;
        case 52: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [44] { return symbol(Sintactico.Sym.Tpublic); }");
          { return symbol(Sintactico.Sym.Tpublic);
          }
        case 116: break;
        case 23: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [125] { string.append( yytext() ); }");
          { string.append( yytext() );
          }
        case 117: break;
        case 21: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [108] { return symbol(Sintactico.Sym.TllaveInicio); }");
          { return symbol(Sintactico.Sym.TllaveInicio);
          }
        case 118: break;
        case 20: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [107] { return symbol(Sintactico.Sym.Tpunto); }");
          { return symbol(Sintactico.Sym.Tpunto);
          }
        case 119: break;
        case 13: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [87] { return symbol(Sintactico.Sym.Tresta); }");
          { return symbol(Sintactico.Sym.Tresta);
          }
        case 120: break;
        case 48: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [43] { return symbol(Sintactico.Sym.Tclass); }");
          { return symbol(Sintactico.Sym.Tclass);
          }
        case 121: break;
        case 31: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [95] { return symbol(Sintactico.Sym.TmayorIgual); }");
          { return symbol(Sintactico.Sym.TmayorIgual);
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
   public static void main(java.io.InputStream stream) {


        Scanner scanner = null;
        try {
          scanner = new Scanner(stream);
          do {
            System.out.println(scanner.nextToken());
          } while (!scanner.zzAtEOF);

        }

        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
